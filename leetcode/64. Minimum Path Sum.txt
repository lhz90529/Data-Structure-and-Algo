64. Minimum Path Sum
Tag: Array, Dynamic Programming
Input: m-by-n gird filled with non-negative number
Output: find a path from top left to bottom right which minimizes the sum of all numbers along its path, and return the minimized sum
Constrains: You can only move down or right

Basic idea:
	Dynamic Programming: Bottom Up Approach
	We start from top left, we use DP table to record the minimize cost to reach all col of the very firt row;
	We update table row by row:
		If we are accessing the first column of a certain row,
			the minimize cost to reach this location is simply the the minimize cost to reach the top of current accessing position + the cost to reach this position; since you can only reach this position from the top;
		else ---> all other column in a certain row
			the minimize cost to reach this location:
				the cost to reach this location + min(the minimized cost to reach the top, the minimized cost to reach the left);

Pseudo code:
1: Initialize a DP table of size n, and filled up the table for the first row;
2: Fill the table with the rest rows:
	if(col == 0)
		table[i] = grid[row][i] + table[i];
	else
		table[i] = grid[row][i] + min(table[i], table[i-1]);

Temporal: O(m*n)
Spatial: O(n)